{"ast":null,"code":"var _jsxFileName = \"C:\\\\workshit\\\\InterviewExperience\\\\Issa\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_ATTEMPTS = 6;\nconst checkGuess = async guess => {\n  const response = await fetch(\"http://localhost:5000/check\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      guess\n    })\n  });\n  return response.json();\n};\nconst restartGame = async () => {\n  await fetch(\"http://localhost:5000/restart\", {\n    method: \"POST\",\n    credentials: 'same-origin'\n  });\n};\nexport default function WordleGame() {\n  _s();\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [feedback, setFeedback] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const handleInputChange = useCallback(e => {\n    if (e.target.value.length <= WORD_LENGTH) {\n      setCurrentGuess(e.target.value.toUpperCase());\n    }\n  }, []);\n  const handleSubmit = useCallback(async () => {\n    if (currentGuess.length === WORD_LENGTH && guesses.length < MAX_ATTEMPTS) {\n      const result = await checkGuess(currentGuess);\n      setGuesses(prevGuesses => [...guesses, currentGuess]);\n      setFeedback(prevGuesses => [...feedback, result.feedback]);\n      setCurrentGuess(\"\");\n      if (result.gameOver) setGameOver(true);\n    }\n  }, [currentGuess, guesses]);\n  const handleRestart = useCallback(async () => {\n    await restartGame();\n    setGuesses([]);\n    setFeedback([]);\n    setCurrentGuess(\"\");\n    setGameOver(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), guesses.map((guess, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 my-2\",\n      children: guess.split(\"\").map((char, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `w-10 h-10 flex items-center justify-center text-lg font-bold text-white rounded ${feedback[index][i] === \"green\" ? \"bg-green-500\" : feedback[index][i] === \"yellow\" ? \"bg-yellow-500\" : \"bg-gray-500\"}`,\n        children: char\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)), !gameOver && guesses.length < MAX_ATTEMPTS && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 my-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentGuess,\n        onChange: handleInputChange,\n        className: \"border p-2 text-lg uppercase\",\n        maxLength: WORD_LENGTH\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"bg-blue-500 text-white px-4 py-2 rounded\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 font-bold\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        className: \"bg-red-500 text-white px-4 py-2 rounded mt-2\",\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(WordleGame, \"tIJDR8K7HWLnF/omoX1VzHEZIoM=\");\n_c = WordleGame;\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["useCallback","useState","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_ATTEMPTS","checkGuess","guess","response","fetch","method","headers","body","JSON","stringify","json","restartGame","credentials","WordleGame","_s","guesses","setGuesses","currentGuess","setCurrentGuess","feedback","setFeedback","gameOver","setGameOver","handleInputChange","e","target","value","length","toUpperCase","handleSubmit","result","prevGuesses","handleRestart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","split","char","i","type","onChange","maxLength","onClick","_c","$RefreshReg$"],"sources":["C:/workshit/InterviewExperience/Issa/my-react-app/src/App.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport \"./App.css\";\n\nconst WORD_LENGTH = 5;\nconst MAX_ATTEMPTS = 6;\n\nconst checkGuess = async (guess) => {\n  const response = await fetch(\"http://localhost:5000/check\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ guess })\n  });\n  return response.json();\n};\n\nconst restartGame = async () => {\n  await fetch(\"http://localhost:5000/restart\", {\n    method: \"POST\",\n    credentials: 'same-origin',\n  });\n};\n\nexport default function WordleGame() {\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [feedback, setFeedback] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleInputChange = useCallback((e) => {\n    if (e.target.value.length <= WORD_LENGTH) {\n      setCurrentGuess(e.target.value.toUpperCase());\n    }\n  },[]);\n\n  const handleSubmit = useCallback(async () => {\n    if (currentGuess.length === WORD_LENGTH && guesses.length < MAX_ATTEMPTS) {\n      const result = await checkGuess(currentGuess);\n      setGuesses((prevGuesses) => [...guesses, currentGuess]);\n      setFeedback((prevGuesses) => [...feedback, result.feedback]);\n      setCurrentGuess(\"\");\n      if (result.gameOver) setGameOver(true);\n    }\n  },[currentGuess, guesses]);\n\n  const handleRestart = useCallback(async () => {\n    await restartGame();\n    setGuesses([]);\n    setFeedback([]);\n    setCurrentGuess(\"\");\n    setGameOver(false);\n  }, []);\n\n  return (\n    <div className=\"flex flex-col items-center p-4\">\n      <h1 className=\"text-2xl font-bold\">Wordle Clone</h1>\n      {guesses.map((guess, index) => (\n        <div key={index} className=\"flex gap-2 my-2\">\n          {guess.split(\"\" ).map((char, i) => (\n            <span\n              key={i}\n              className={`w-10 h-10 flex items-center justify-center text-lg font-bold text-white rounded ${\n                feedback[index][i] === \"green\"\n                  ? \"bg-green-500\"\n                  : feedback[index][i] === \"yellow\"\n                  ? \"bg-yellow-500\"\n                  : \"bg-gray-500\"\n              }`}\n            >\n              {char}\n            </span>\n          ))}\n        </div>\n      ))}\n      {!gameOver && guesses.length < MAX_ATTEMPTS && (\n        <div className=\"flex gap-2 my-4\">\n          <input\n            type=\"text\"\n            value={currentGuess}\n            onChange={handleInputChange}\n            className=\"border p-2 text-lg uppercase\"\n            maxLength={WORD_LENGTH}\n          />\n          <button\n            onClick={handleSubmit}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n          >\n            Submit\n          </button>\n        </div>\n      )}\n      {gameOver && (\n        <div className=\"text-center mt-4\">\n          <p className=\"text-green-600 font-bold\">Game Over!</p>\n          <button\n            onClick={handleRestart}\n            className=\"bg-red-500 text-white px-4 py-2 rounded mt-2\"\n          >\n            Restart Game\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}