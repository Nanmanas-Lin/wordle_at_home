{"ast":null,"code":"var _jsxFileName = \"C:\\\\workshit\\\\InterviewExperience\\\\Issa\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_ATTEMPTS = 6;\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst checkGuess = async guess => {\n  const response = await fetch(\"http://localhost:5000/check\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      guess\n    }),\n    credentials: \"same-origin\" // Ensure session cookies are sent with the request\n  });\n  return response.json();\n};\nconst restartGame = async () => {\n  await fetch(\"http://localhost:5000/restart\", {\n    method: \"POST\",\n    credentials: \"same-origin\" // Ensure session cookies are sent with the request\n  });\n};\nexport default function WordleGame() {\n  _s();\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(\"\"));\n  const [feedback, setFeedback] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Create refs for each input box\n  const inputRefs = useRef([]);\n  const handleInputChange = useCallback((e, index) => {\n    const value = e.target.value.toUpperCase();\n\n    // Ensure the value is a single alphabetic character\n    if (/^[A-Z]*$/.test(value)) {\n      setCurrentGuess(prevGuess => {\n        const updatedGuess = [...prevGuess];\n        updatedGuess[index] = value.slice(0, 1); // Ensure only 1 character per box\n        return updatedGuess;\n      });\n      // Automatically move focus to the next input if current box is filled\n      if (value.length === 1 && index < WORD_LENGTH - 1) {\n        var _inputRefs$current;\n        (_inputRefs$current = inputRefs.current[index + 1]) === null || _inputRefs$current === void 0 ? void 0 : _inputRefs$current.focus();\n      }\n    }\n  }, []);\n  const handleClickInputBox = useCallback(index => {\n    // Find the first empty input box (if any) and focus on it\n    const firstEmptyIndex = currentGuess.findIndex(char => char === \"\");\n    if (firstEmptyIndex !== -1) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n  const handleSubmit = useCallback(async () => {\n    const guess = currentGuess.join(\"\"); // Join the array into a single string\n    if (guess.length === WORD_LENGTH && guesses.length < MAX_ATTEMPTS) {\n      const result = await checkGuess(guess);\n      setGuesses(prevGuesses => [...prevGuesses, guess]);\n      setFeedback(prevFeedback => [...prevFeedback, result.feedback]);\n      setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n      if (result.gameOver) {\n        setGameOver(true);\n      }\n      if (guesses.length + 1 === MAX_ATTEMPTS) {\n        setGameOver(true); // Force game over after reaching max attempts\n      }\n      const firstEmptyIndex = currentGuess.findIndex(char => char === \"\");\n      if (firstEmptyIndex !== -1) {\n        inputRefs.current[firstEmptyIndex].focus();\n      }\n    }\n  }, [currentGuess, guesses]);\n  const handleRestart = useCallback(async () => {\n    await restartGame();\n    setGuesses([]);\n    setFeedback([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n    setGameOver(false); // Reset game over state\n  }, []);\n  const handleSpecials = useCallback((e, index) => {\n    if (e.key === \"Backspace\" && currentGuess[index] === \"\") {\n      // Focus on the previous box if the current box is empty and backspace is pressed\n      if (index > 0) {\n        var _inputRefs$current2;\n        (_inputRefs$current2 = inputRefs.current[index - 1]) === null || _inputRefs$current2 === void 0 ? void 0 : _inputRefs$current2.focus();\n      }\n    }\n    if (e.key === \"Enter\") {\n      handleSubmit();\n    }\n  }, [currentGuess]);\n\n  // Focus on the next empty input box after render\n  useEffect(() => {\n    const firstEmptyIndex = currentGuess.findIndex(char => char === \"\");\n    if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n  const getLettercolor = letter => {\n    const status = letterFeedback[letter];\n    if (status === \"green\") {\n      return \"bg-green-500\";\n    } else if (status === \"yellow\") {\n      return \"bg-yellow-500\";\n    } else if (status === \"gray\") {\n      return \"bg-gray-500\";\n    } else {\n      return \"bg-white\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), Array.from({\n      length: MAX_ATTEMPTS\n    }).map((_, attemptIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 my-2\",\n      children: Array.from({\n        length: WORD_LENGTH\n      }).map((_, boxIndex) => {\n        var _guesses$attemptIndex, _feedback$attemptInde;\n        const guessChar = ((_guesses$attemptIndex = guesses[attemptIndex]) === null || _guesses$attemptIndex === void 0 ? void 0 : _guesses$attemptIndex[boxIndex]) || \"\";\n        const boxFeedback = ((_feedback$attemptInde = feedback[attemptIndex]) === null || _feedback$attemptInde === void 0 ? void 0 : _feedback$attemptInde[boxIndex]) || \"\";\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `w-10 h-10 flex items-center justify-center text-lg font-bold text-white rounded ${boxFeedback === \"green\" ? \"bg-green-500\" : boxFeedback === \"yellow\" ? \"bg-yellow-500\" : \"bg-gray-500\"}`,\n          children: guessChar\n        }, boxIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this);\n      })\n    }, attemptIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)), !gameOver && guesses.length < MAX_ATTEMPTS && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 my-4\",\n      children: [currentGuess.map((char, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: char,\n        onChange: e => handleInputChange(e, i),\n        onKeyDown: e => handleSpecials(e, i),\n        className: \"w-10 h-10 text-lg font-bold text-center border border-gray-400 rounded\",\n        maxLength: 1 // Only allow 1 character per box\n        ,\n        disabled: gameOver || guesses.length >= MAX_ATTEMPTS,\n        ref: el => inputRefs.current[i] = el // Store the reference for each input\n        ,\n        onClick: () => handleClickInputBox(i) // Focus on the first empty box when clicked\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"bg-blue-500 text-white px-4 py-2 rounded\",\n        disabled: currentGuess.join(\"\").length !== WORD_LENGTH,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-10 gap-2 my-4\",\n      children: ALPHABET.split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `w-12 h-12 text-lg font-bold text-center rounded ${getLetterColor(letter)} ${gameOver ? \"cursor-not-allowed\" : \"\"}`,\n        disabled: gameOver,\n        onClick: () => {},\n        children: letter\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 font-bold\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        className: \"bg-red-500 text-white px-4 py-2 rounded mt-2\",\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(WordleGame, \"TFTLVocsBdxup/Ac+lJMfLwdcDs=\");\n_c = WordleGame;\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_ATTEMPTS","ALPHABET","checkGuess","guess","response","fetch","method","headers","body","JSON","stringify","credentials","json","restartGame","WordleGame","_s","guesses","setGuesses","currentGuess","setCurrentGuess","Array","fill","feedback","setFeedback","gameOver","setGameOver","inputRefs","handleInputChange","e","index","value","target","toUpperCase","test","prevGuess","updatedGuess","slice","length","_inputRefs$current","current","focus","handleClickInputBox","firstEmptyIndex","findIndex","char","handleSubmit","join","result","prevGuesses","prevFeedback","handleRestart","handleSpecials","key","_inputRefs$current2","getLettercolor","letter","status","letterFeedback","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","map","_","attemptIndex","boxIndex","_guesses$attemptIndex","_feedback$attemptInde","guessChar","boxFeedback","i","type","onChange","onKeyDown","maxLength","disabled","ref","el","onClick","split","getLetterColor","_c","$RefreshReg$"],"sources":["C:/workshit/InterviewExperience/Issa/my-react-app/src/App.js"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst WORD_LENGTH = 5;\nconst MAX_ATTEMPTS = 6;\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst checkGuess = async (guess) => {\n  const response = await fetch(\"http://localhost:5000/check\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ guess }),\n    credentials: \"same-origin\", // Ensure session cookies are sent with the request\n  });\n  return response.json();\n};\n\nconst restartGame = async () => {\n  await fetch(\"http://localhost:5000/restart\", {\n    method: \"POST\",\n    credentials: \"same-origin\", // Ensure session cookies are sent with the request\n  });\n};\n\nexport default function WordleGame() {\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(\"\"));\n  const [feedback, setFeedback] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Create refs for each input box\n  const inputRefs = useRef([]);\n\n  const handleInputChange = useCallback((e, index) => {\n    const value = e.target.value.toUpperCase();\n\n    // Ensure the value is a single alphabetic character\n    if (/^[A-Z]*$/.test(value)) {\n      setCurrentGuess((prevGuess) => {\n        const updatedGuess = [...prevGuess];\n        updatedGuess[index] = value.slice(0, 1); // Ensure only 1 character per box\n        return updatedGuess;\n      });\n      // Automatically move focus to the next input if current box is filled\n    if (value.length === 1 && index < WORD_LENGTH - 1) {\n      inputRefs.current[index + 1]?.focus();\n    }\n    }\n\n    \n  }, []);\n\n  const handleClickInputBox = useCallback((index) => {\n    // Find the first empty input box (if any) and focus on it\n    const firstEmptyIndex = currentGuess.findIndex((char) => char === \"\");\n    if (firstEmptyIndex !== -1) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n\n  const handleSubmit = useCallback(async () => {\n    const guess = currentGuess.join(\"\"); // Join the array into a single string\n    if (guess.length === WORD_LENGTH && guesses.length < MAX_ATTEMPTS) {\n      const result = await checkGuess(guess);\n      setGuesses((prevGuesses) => [...prevGuesses, guess]);\n      setFeedback((prevFeedback) => [...prevFeedback, result.feedback]);\n      setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n\n      if (result.gameOver) {\n        setGameOver(true);\n      }\n\n      if (guesses.length + 1 === MAX_ATTEMPTS) {\n        setGameOver(true); // Force game over after reaching max attempts\n      }\n      const firstEmptyIndex = currentGuess.findIndex((char) => char === \"\");\n      \n      if (firstEmptyIndex !== -1) {\n        inputRefs.current[firstEmptyIndex].focus();\n      }\n    }\n  }, [currentGuess, guesses]);\n\n  const handleRestart = useCallback(async () => {\n    await restartGame();\n    setGuesses([]);\n    setFeedback([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n    setGameOver(false); // Reset game over state\n  }, []);  \n\n  const handleSpecials = useCallback((e, index) => {\n    if (e.key === \"Backspace\" && currentGuess[index] === \"\") {\n      // Focus on the previous box if the current box is empty and backspace is pressed\n      if (index > 0) {\n        inputRefs.current[index - 1]?.focus();\n      }\n    }\n\n    if (e.key === \"Enter\"){\n      handleSubmit();\n    }\n  }, [currentGuess]);\n\n  // Focus on the next empty input box after render\n  useEffect(() => {\n    const firstEmptyIndex = currentGuess.findIndex((char) => char === \"\");\n    if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n\n  const getLettercolor = (letter) => {\n    const status = letterFeedback[letter];\n    if (status === \"green\") {\n      return \"bg-green-500\";\n    } else if (status === \"yellow\") {\n      return \"bg-yellow-500\";\n    } else if (status === \"gray\") {\n      return \"bg-gray-500\";\n    } else {\n      return \"bg-white\";\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center p-4\">\n      <h1 className=\"text-2xl font-bold\">Wordle Clone</h1>\n      {Array.from({ length: MAX_ATTEMPTS }).map((_, attemptIndex) => (\n        <div key={attemptIndex} className=\"flex gap-2 my-2\">\n          {Array.from({ length: WORD_LENGTH }).map((_, boxIndex) => {\n            const guessChar = guesses[attemptIndex]?.[boxIndex] || \"\";\n            const boxFeedback = feedback[attemptIndex]?.[boxIndex] || \"\";\n\n            return (\n              <span\n                key={boxIndex}\n                className={`w-10 h-10 flex items-center justify-center text-lg font-bold text-white rounded ${\n                  boxFeedback === \"green\"\n                    ? \"bg-green-500\"\n                    : boxFeedback === \"yellow\"\n                    ? \"bg-yellow-500\"\n                    : \"bg-gray-500\"\n                }`}\n              >\n                {guessChar}\n              </span>\n            );\n          })}\n        </div>\n      ))}\n\n      {!gameOver && guesses.length < MAX_ATTEMPTS && (\n        <div className=\"flex gap-2 my-4\">\n          {/* Render individual editable input boxes */}\n          {currentGuess.map((char, i) => (\n            <input\n              key={i}\n              type=\"text\"\n              value={char}\n              onChange={(e) => handleInputChange(e, i)}\n              onKeyDown={(e) => handleSpecials(e, i)}\n              className=\"w-10 h-10 text-lg font-bold text-center border border-gray-400 rounded\"\n              maxLength={1} // Only allow 1 character per box\n              disabled={gameOver || guesses.length >= MAX_ATTEMPTS}\n              ref={(el) => (inputRefs.current[i] = el)} // Store the reference for each input\n              onClick={() => handleClickInputBox(i)} // Focus on the first empty box when clicked\n            />\n          ))}\n          <button\n            onClick={handleSubmit}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n            disabled={currentGuess.join(\"\").length !== WORD_LENGTH}\n          >\n            Submit\n          </button>\n        </div>\n      )}\n\n      {/* Render Keyboard Layout */}\n      <div className=\"grid grid-cols-10 gap-2 my-4\">\n        {ALPHABET.split(\"\").map((letter) => (\n          <button\n            key={letter}\n            className={`w-12 h-12 text-lg font-bold text-center rounded ${getLetterColor(letter)} ${gameOver ? \"cursor-not-allowed\" : \"\"}`}\n            disabled={gameOver}\n            onClick={() => {}}\n          >\n            {letter}\n          </button>\n        ))}\n      </div>\n\n      {gameOver && (\n        <div className=\"text-center mt-4\">\n          <p className=\"text-green-600 font-bold\">Game Over!</p>\n          <button\n            onClick={handleRestart}\n            className=\"bg-red-500 text-white px-4 py-2 rounded mt-2\"\n          >\n            Restart Game\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}