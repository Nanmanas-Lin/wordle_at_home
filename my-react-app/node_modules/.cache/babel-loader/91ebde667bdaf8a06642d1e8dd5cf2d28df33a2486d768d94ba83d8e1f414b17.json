{"ast":null,"code":"var _jsxFileName = \"C:\\\\workshit\\\\InterviewExperience\\\\Issa\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORD_LENGTH = 5;\nconst MAX_ATTEMPTS = 6;\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst checkGuess = async guess => {\n  const response = await fetch(\"http://localhost:5000/check\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      guess\n    }),\n    credentials: \"include\" // Ensure session cookies are sent with the request\n  });\n  return response.json();\n};\nconst restartGame = async () => {\n  await fetch(\"http://localhost:5000/restart\", {\n    method: \"POST\",\n    credentials: \"include\" // Ensure session cookies are sent with the request\n  });\n};\nexport default function WordleGame() {\n  _s();\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(\"\"));\n  const [feedback, setFeedback] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [letterFeedback, setLetterFeedback] = useState({}); // To track feedback for each letter\n\n  // Create refs for each input box\n  const inputRefs = useRef([]);\n\n  // Handle input change\n  const handleInputChange = useCallback((e, index) => {\n    const value = e.target.value.toUpperCase();\n\n    // Ensure the value is a single alphabetic character\n    if (/^[A-Z]*$/.test(value)) {\n      setCurrentGuess(prevGuess => {\n        const updatedGuess = [...prevGuess];\n        updatedGuess[index] = value.slice(0, 1); // Ensure only 1 character per box\n        return updatedGuess;\n      });\n      // Automatically move focus to the next input if current box is filled\n      if (value.length === 1 && index < WORD_LENGTH - 1) {\n        var _inputRefs$current;\n        (_inputRefs$current = inputRefs.current[index + 1]) === null || _inputRefs$current === void 0 ? void 0 : _inputRefs$current.focus(); // Ensure focus only when ref is valid\n      }\n    }\n  }, []);\n\n  // Handle click on an input box (focus the first empty input box)\n  const handleClickInputBox = useCallback(index => {\n    // Find the first empty input box (if any) and focus on it\n    const firstEmptyIndex = currentGuess.findIndex(char => char === \"\");\n    if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n\n  // Submit the guess\n  const handleSubmit = useCallback(async () => {\n    const guess = currentGuess.join(\"\"); // Join the array into a single string\n    if (guess.length === WORD_LENGTH && guesses.length < MAX_ATTEMPTS) {\n      const result = await checkGuess(guess);\n\n      // Add the guess and feedback to state\n      setGuesses(prevGuesses => {\n        const updatedGuesses = [...prevGuesses, guess];\n        if (updatedGuesses.length >= MAX_ATTEMPTS) {\n          setGameOver(true); // Set gameOver when max attempts are reached\n        }\n        return updatedGuesses;\n      });\n      setFeedback(prevFeedback => [...prevFeedback, result.feedback]);\n      setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n\n      // Update letter feedback based on the result\n      const updatedLetterFeedback = {\n        ...letterFeedback\n      };\n      result.feedback.forEach((status, index) => {\n        const letter = guess[index];\n        updatedLetterFeedback[letter] = status; // Store feedback for each letter\n      });\n      setLetterFeedback(updatedLetterFeedback);\n\n      // If the game is over, no further guess should be submitted\n      if (result.gameOver) {\n        setGameOver(true);\n      }\n\n      // Focus on the first empty input box after submit\n      const firstEmptyIndex = currentGuess.findIndex(char => char === \"\");\n      if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n        inputRefs.current[firstEmptyIndex].focus(); // Focus only when ref is valid\n      }\n    }\n  }, [currentGuess, guesses, letterFeedback]);\n\n  // Restart the game\n  const handleRestart = useCallback(async () => {\n    await restartGame();\n    setGuesses([]);\n    setFeedback([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n    setGameOver(false); // Reset game over state\n    setLetterFeedback({}); // Reset letter feedback\n  }, []);\n\n  // Handle backspace logic\n  const handleBackspace = useCallback((e, index) => {\n    if (e.key === \"Backspace\" && currentGuess[index] === \"\") {\n      // Focus on the previous box if the current box is empty and backspace is pressed\n      if (index > 0) {\n        var _inputRefs$current2;\n        (_inputRefs$current2 = inputRefs.current[index - 1]) === null || _inputRefs$current2 === void 0 ? void 0 : _inputRefs$current2.focus(); // Ensure focus only when ref is valid\n      }\n    }\n    if (e.key === \"Enter\") {\n      handleSubmit();\n    }\n  }, [currentGuess]);\n\n  // Focus on the next empty input box after render\n  useEffect(() => {\n    const firstEmptyIndex = currentGuess.findIndex(char => char === \"\");\n    if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n\n  // Function to get the color for a letter based on its feedback\n  const getLetterColor = letter => {\n    const status = letterFeedback[letter];\n    if (status === \"green\") {\n      return \"bg-green-500\";\n    } else if (status === \"yellow\") {\n      return \"bg-yellow-500\";\n    } else if (status === \"gray\") {\n      return \"bg-gray-500\";\n    } else {\n      return \"bg-white\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold\",\n      children: \"Wordle At Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), Array.from({\n      length: MAX_ATTEMPTS\n    }).map((_, attemptIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 my-2\",\n      children: Array.from({\n        length: WORD_LENGTH\n      }).map((_, boxIndex) => {\n        var _guesses$attemptIndex, _feedback$attemptInde;\n        const guessChar = ((_guesses$attemptIndex = guesses[attemptIndex]) === null || _guesses$attemptIndex === void 0 ? void 0 : _guesses$attemptIndex[boxIndex]) || \"\";\n        const boxFeedback = ((_feedback$attemptInde = feedback[attemptIndex]) === null || _feedback$attemptInde === void 0 ? void 0 : _feedback$attemptInde[boxIndex]) || \"\";\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `w-10 h-10 flex items-center justify-center text-lg font-bold text-white rounded ${boxFeedback === \"green\" ? \"bg-green-500\" : boxFeedback === \"yellow\" ? \"bg-yellow-500\" : \"bg-gray-500\"}`,\n          children: guessChar\n        }, boxIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this);\n      })\n    }, attemptIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)), !gameOver && guesses.length < MAX_ATTEMPTS && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 my-4\",\n      children: [currentGuess.map((char, i) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: char,\n        onChange: e => handleInputChange(e, i),\n        onKeyDown: e => handleBackspace(e, i),\n        className: \"w-10 h-10 text-lg font-bold text-center border border-gray-400 rounded\",\n        maxLength: 1 // Only allow 1 character per box\n        ,\n        disabled: gameOver || guesses.length >= MAX_ATTEMPTS,\n        ref: el => inputRefs.current[i] = el // Store the reference for each input\n        ,\n        onClick: () => handleClickInputBox(i) // Focus on the first empty box when clicked\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"bg-blue-500 text-white px-4 py-2 rounded\",\n        disabled: currentGuess.join(\"\").length !== WORD_LENGTH,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-10 gap-2 my-4\",\n      children: ALPHABET.split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `w-12 h-12 text-lg font-bold text-center rounded ${getLetterColor(letter)} ${gameOver ? \"cursor-not-allowed\" : \"\"}`,\n        disabled: gameOver,\n        onClick: () => {},\n        children: letter\n      }, letter, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 font-bold\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        className: \"bg-red-500 text-white px-4 py-2 rounded mt-2\",\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(WordleGame, \"aISvEBgMjM/56anvpSK71A8urBI=\");\n_c = WordleGame;\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","jsxDEV","_jsxDEV","WORD_LENGTH","MAX_ATTEMPTS","ALPHABET","checkGuess","guess","response","fetch","method","headers","body","JSON","stringify","credentials","json","restartGame","WordleGame","_s","guesses","setGuesses","currentGuess","setCurrentGuess","Array","fill","feedback","setFeedback","gameOver","setGameOver","letterFeedback","setLetterFeedback","inputRefs","handleInputChange","e","index","value","target","toUpperCase","test","prevGuess","updatedGuess","slice","length","_inputRefs$current","current","focus","handleClickInputBox","firstEmptyIndex","findIndex","char","handleSubmit","join","result","prevGuesses","updatedGuesses","prevFeedback","updatedLetterFeedback","forEach","status","letter","handleRestart","handleBackspace","key","_inputRefs$current2","getLetterColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","map","_","attemptIndex","boxIndex","_guesses$attemptIndex","_feedback$attemptInde","guessChar","boxFeedback","i","type","onChange","onKeyDown","maxLength","disabled","ref","el","onClick","split","_c","$RefreshReg$"],"sources":["C:/workshit/InterviewExperience/Issa/my-react-app/src/App.js"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst WORD_LENGTH = 5;\nconst MAX_ATTEMPTS = 6;\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst checkGuess = async (guess) => {\n  const response = await fetch(\"http://localhost:5000/check\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ guess }),\n    credentials: \"include\", // Ensure session cookies are sent with the request\n  });\n  return response.json();\n};\n\nconst restartGame = async () => {\n  await fetch(\"http://localhost:5000/restart\", {\n    method: \"POST\",\n    credentials: \"include\", // Ensure session cookies are sent with the request\n  });\n};\n\nexport default function WordleGame() {\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(Array(WORD_LENGTH).fill(\"\"));\n  const [feedback, setFeedback] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [letterFeedback, setLetterFeedback] = useState({}); // To track feedback for each letter\n\n  // Create refs for each input box\n  const inputRefs = useRef([]);\n\n  // Handle input change\n  const handleInputChange = useCallback((e, index) => {\n    const value = e.target.value.toUpperCase();\n\n    // Ensure the value is a single alphabetic character\n    if (/^[A-Z]*$/.test(value)) {\n      setCurrentGuess((prevGuess) => {\n        const updatedGuess = [...prevGuess];\n        updatedGuess[index] = value.slice(0, 1); // Ensure only 1 character per box\n        return updatedGuess;\n      });\n      // Automatically move focus to the next input if current box is filled\n      if (value.length === 1 && index < WORD_LENGTH - 1) {\n        inputRefs.current[index + 1]?.focus(); // Ensure focus only when ref is valid\n      }\n    }\n  }, []);\n\n  // Handle click on an input box (focus the first empty input box)\n  const handleClickInputBox = useCallback((index) => {\n    // Find the first empty input box (if any) and focus on it\n    const firstEmptyIndex = currentGuess.findIndex((char) => char === \"\");\n    if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n\n  // Submit the guess\n  const handleSubmit = useCallback(async () => {\n    const guess = currentGuess.join(\"\"); // Join the array into a single string\n    if (guess.length === WORD_LENGTH && guesses.length < MAX_ATTEMPTS) {\n      const result = await checkGuess(guess);\n      \n      // Add the guess and feedback to state\n      setGuesses((prevGuesses) => {\n        const updatedGuesses = [...prevGuesses, guess];\n        if (updatedGuesses.length >= MAX_ATTEMPTS) {\n          setGameOver(true); // Set gameOver when max attempts are reached\n        }\n        return updatedGuesses;\n      });\n      setFeedback((prevFeedback) => [...prevFeedback, result.feedback]);\n      setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n  \n      // Update letter feedback based on the result\n      const updatedLetterFeedback = { ...letterFeedback };\n      result.feedback.forEach((status, index) => {\n        const letter = guess[index];\n        updatedLetterFeedback[letter] = status; // Store feedback for each letter\n      });\n      setLetterFeedback(updatedLetterFeedback);\n  \n      // If the game is over, no further guess should be submitted\n      if (result.gameOver) {\n        setGameOver(true);\n      }\n  \n      // Focus on the first empty input box after submit\n      const firstEmptyIndex = currentGuess.findIndex((char) => char === \"\");\n      if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n        inputRefs.current[firstEmptyIndex].focus(); // Focus only when ref is valid\n      }\n    }\n  }, [currentGuess, guesses, letterFeedback]);\n\n  // Restart the game\n  const handleRestart = useCallback(async () => {\n    await restartGame();\n    setGuesses([]);\n    setFeedback([]);\n    setCurrentGuess(Array(WORD_LENGTH).fill(\"\"));\n    setGameOver(false); // Reset game over state\n    setLetterFeedback({}); // Reset letter feedback\n  }, []);\n\n  // Handle backspace logic\n  const handleBackspace = useCallback((e, index) => {\n    if (e.key === \"Backspace\" && currentGuess[index] === \"\") {\n      // Focus on the previous box if the current box is empty and backspace is pressed\n      if (index > 0) {\n        inputRefs.current[index - 1]?.focus(); // Ensure focus only when ref is valid\n      }\n    }\n\n    if (e.key === \"Enter\") {\n      handleSubmit();\n    }\n  }, [currentGuess]);\n\n  // Focus on the next empty input box after render\n  useEffect(() => {\n    const firstEmptyIndex = currentGuess.findIndex((char) => char === \"\");\n    if (firstEmptyIndex !== -1 && inputRefs.current[firstEmptyIndex]) {\n      inputRefs.current[firstEmptyIndex].focus();\n    }\n  }, [currentGuess]);\n\n  // Function to get the color for a letter based on its feedback\n  const getLetterColor = (letter) => {\n    const status = letterFeedback[letter];\n    if (status === \"green\") {\n      return \"bg-green-500\";\n    } else if (status === \"yellow\") {\n      return \"bg-yellow-500\";\n    } else if (status === \"gray\") {\n      return \"bg-gray-500\";\n    } else {\n      return \"bg-white\";\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-4\">\n      <h1 className=\"text-2xl font-bold\">Wordle At Home</h1>\n\n      {/* Render guesses */}\n      {Array.from({ length: MAX_ATTEMPTS }).map((_, attemptIndex) => (\n        <div key={attemptIndex} className=\"flex gap-2 my-2\">\n          {Array.from({ length: WORD_LENGTH }).map((_, boxIndex) => {\n            const guessChar = guesses[attemptIndex]?.[boxIndex] || \"\";\n            const boxFeedback = feedback[attemptIndex]?.[boxIndex] || \"\";\n\n            return (\n              <span\n                key={boxIndex}\n                className={`w-10 h-10 flex items-center justify-center text-lg font-bold text-white rounded ${\n                  boxFeedback === \"green\"\n                    ? \"bg-green-500\"\n                    : boxFeedback === \"yellow\"\n                    ? \"bg-yellow-500\"\n                    : \"bg-gray-500\"\n                }`}\n              >\n                {guessChar}\n              </span>\n            );\n          })}\n        </div>\n      ))}\n\n      {/* Render current guess input */}\n      {!gameOver && guesses.length < MAX_ATTEMPTS && (\n        <div className=\"flex gap-2 my-4\">\n          {/* Render individual editable input boxes */}\n          {currentGuess.map((char, i) => (\n            <input\n              key={i}\n              type=\"text\"\n              value={char}\n              onChange={(e) => handleInputChange(e, i)}\n              onKeyDown={(e) => handleBackspace(e, i)}\n              className=\"w-10 h-10 text-lg font-bold text-center border border-gray-400 rounded\"\n              maxLength={1} // Only allow 1 character per box\n              disabled={gameOver || guesses.length >= MAX_ATTEMPTS}\n              ref={(el) => (inputRefs.current[i] = el)} // Store the reference for each input\n              onClick={() => handleClickInputBox(i)} // Focus on the first empty box when clicked\n            />\n          ))}\n          <button\n            onClick={handleSubmit}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n            disabled={currentGuess.join(\"\").length !== WORD_LENGTH}\n          >\n            Submit\n          </button>\n        </div>\n      )}\n\n      {/* Render Keyboard Layout */}\n      <div className=\"grid grid-cols-10 gap-2 my-4\">\n        {ALPHABET.split(\"\").map((letter) => (\n          <button\n            key={letter}\n            className={`w-12 h-12 text-lg font-bold text-center rounded ${getLetterColor(letter)} ${gameOver ? \"cursor-not-allowed\" : \"\"}`}\n            disabled={gameOver}\n            onClick={() => {}}\n          >\n            {letter}\n          </button>\n        ))}\n      </div>\n\n      {gameOver && (\n        <div className=\"text-center mt-4\">\n          <p className=\"text-green-600 font-bold\">Game Over!</p>\n          <button\n            onClick={handleRestart}\n            className=\"bg-red-500 text-white px-4 py-2 rounded mt-2\"\n          >\n            Restart Game\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}