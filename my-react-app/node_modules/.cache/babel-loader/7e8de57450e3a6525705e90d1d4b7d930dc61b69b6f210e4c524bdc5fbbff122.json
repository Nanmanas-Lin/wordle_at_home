{"ast":null,"code":"var _jsxFileName = \"C:\\\\workshit\\\\InterviewExperience\\\\Issa\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordleGame = () => {\n  _s();\n  // Game states\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState({\n    guesses: Array(6).fill(\"\"),\n    currentGuess: 0,\n    gameOver: false,\n    won: false,\n    message: \"\",\n    isLoading: false,\n    error: null,\n    letterStates: {},\n    allFeedback: []\n  });\n\n  // Current input for the active row\n  const [currentInput, setCurrentInput] = useState(\"\");\n\n  // API URL - change this to your Flask server URL\n  const API_URL = \"http://localhost:5000/api\";\n\n  // Keyboard layout\n  const keyboardRows = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['Enter', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Backspace']];\n\n  // Initialize game\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  const startNewGame = async () => {\n    try {\n      setGameState(prev => ({\n        ...prev,\n        isLoading: true,\n        error: null\n      }));\n      const response = await fetch(`${API_URL}/new-game`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to start new game');\n      const data = await response.json();\n      setSessionId(data.session_id);\n      setCurrentInput(\"\");\n      setGameState({\n        guesses: data.guesses,\n        currentGuess: data.current_guess,\n        gameOver: data.game_over,\n        won: data.won,\n        message: data.message,\n        isLoading: false,\n        error: null,\n        letterStates: data.letter_states || {},\n        allFeedback: []\n      });\n    } catch (error) {\n      setGameState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message,\n        message: \"Failed to connect to server\"\n      }));\n    }\n  };\n\n  // Update game state from server\n  const refreshGameState = async () => {\n    if (!sessionId) return;\n    try {\n      const response = await fetch(`${API_URL}/get-game-state?session_id=${sessionId}`);\n      if (!response.ok) throw new Error('Failed to get game state');\n      const data = await response.json();\n      setGameState(prev => ({\n        ...prev,\n        guesses: data.guesses,\n        currentGuess: data.current_guess,\n        gameOver: data.game_over,\n        won: data.won,\n        message: data.message,\n        letterStates: data.letter_states,\n        allFeedback: data.all_feedback\n      }));\n    } catch (error) {\n      console.error(\"Error refreshing game state:\", error);\n    }\n  };\n\n  // Handle keyboard input via API\n  const handleKeyPress = async key => {\n    if (gameState.gameOver || gameState.isLoading) return;\n    if (key === 'Backspace') {\n      await handleRemoveLetter();\n    } else if (key === 'Enter') {\n      if (currentInput.length === 5) {\n        await submitGuess(currentInput);\n      } else {\n        setGameState(prev => ({\n          ...prev,\n          message: \"Word must be 5 letters\"\n        }));\n        setTimeout(() => setGameState(prev => ({\n          ...prev,\n          message: \"\"\n        })), 1500);\n      }\n    } else if (/^[A-Z]$/.test(key)) {\n      await handleAddLetter(key);\n    }\n  };\n\n  // Add letter via API\n  const handleAddLetter = async letter => {\n    if (currentInput.length >= 5) return;\n    try {\n      setGameState(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n      const response = await fetch(`${API_URL}/add-letter`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          session_id: sessionId,\n          letter: letter,\n          current_input: currentInput\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to add letter');\n      }\n      const data = await response.json();\n      setCurrentInput(data.current_input);\n      setGameState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error(\"Error adding letter:\", error);\n      setGameState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    }\n  };\n\n  // Remove letter via API\n  const handleRemoveLetter = async () => {\n    if (currentInput.length === 0) return;\n    try {\n      setGameState(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n      const response = await fetch(`${API_URL}/remove-letter`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          session_id: sessionId,\n          current_input: currentInput\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to remove letter');\n      }\n      const data = await response.json();\n      setCurrentInput(data.current_input);\n      setGameState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error(\"Error removing letter:\", error);\n      setGameState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    }\n  };\n\n  // Submit guess to server\n  const submitGuess = async guess => {\n    try {\n      setGameState(prev => ({\n        ...prev,\n        isLoading: true,\n        error: null\n      }));\n      const response = await fetch(`${API_URL}/submit-guess`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          session_id: sessionId,\n          guess\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to submit guess');\n      }\n      const data = await response.json();\n      setCurrentInput(\"\");\n\n      // Update local feedback array with the new feedback\n      const updatedFeedback = [...gameState.allFeedback];\n      updatedFeedback[data.current_guess] = data.feedback;\n      setGameState({\n        guesses: data.guesses,\n        currentGuess: data.current_guess,\n        gameOver: data.game_over,\n        won: data.won,\n        message: data.message,\n        isLoading: false,\n        error: null,\n        letterStates: data.letter_states,\n        allFeedback: updatedFeedback\n      });\n    } catch (error) {\n      setGameState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message,\n        message: error.message\n      }));\n      setTimeout(() => setGameState(prev => ({\n        ...prev,\n        message: \"\"\n      })), 1500);\n    }\n  };\n\n  // Get tile color based on feedback from server\n  const getTileColor = (letter, colIndex, rowIndex) => {\n    if (!letter) return \"bg-gray-200\";\n\n    // For submitted rows, use feedback from server\n    if (rowIndex < gameState.currentGuess) {\n      const rowFeedback = gameState.allFeedback[rowIndex];\n      if (rowFeedback && rowFeedback[colIndex]) {\n        const status = rowFeedback[colIndex].status;\n        if (status === \"correct\") return \"bg-green-500 text-white\";\n        if (status === \"present\") return \"bg-yellow-500 text-white\";\n        return \"bg-gray-500 text-white\";\n      }\n      return \"bg-gray-500 text-white\";\n    }\n\n    // For current row (active input)\n    if (rowIndex === gameState.currentGuess) {\n      return \"bg-white border-2 border-gray-300\";\n    }\n\n    // For future rows\n    return \"bg-gray-200\";\n  };\n\n  // Get keyboard key color based on letter state from server\n  const getKeyColor = key => {\n    if (key === 'Enter' || key === 'Backspace') {\n      return \"bg-gray-300\";\n    }\n    const status = gameState.letterStates[key];\n    if (status === \"correct\") return \"bg-green-500 text-white\";\n    if (status === \"present\") return \"bg-yellow-500 text-white\";\n    if (status === \"absent\") return \"bg-gray-500 text-white\";\n    return \"bg-gray-200\"; // Default/unused\n  };\n\n  // Render the game board\n  const renderBoard = () => {\n    return Array(6).fill().map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex mb-2\",\n      children: Array(5).fill().map((_, colIndex) => {\n        // For the current active row, use the live input\n        let letter = \"\";\n        if (rowIndex === gameState.currentGuess) {\n          letter = currentInput[colIndex] || \"\";\n        } else {\n          // For submitted rows, use the stored guesses\n          letter = gameState.guesses[rowIndex] && gameState.guesses[rowIndex][colIndex] ? gameState.guesses[rowIndex][colIndex] : \"\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex items-center justify-center w-12 h-12 m-1 text-2xl font-bold rounded ${getTileColor(letter, colIndex, rowIndex)}`,\n          children: letter\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold mb-8 text-gray-800\",\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), gameState.message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 px-4 py-2 rounded bg-blue-100 text-blue-800\",\n      children: gameState.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }, this), gameState.isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 px-4 py-2 rounded bg-yellow-100 text-yellow-800\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this), gameState.error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 px-4 py-2 rounded bg-red-100 text-red-800\",\n      children: [\"Error: \", gameState.error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-md\",\n      children: keyboardRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mb-2\",\n        children: row.map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${key === 'Enter' || key === 'Backspace' ? 'w-16' : 'w-10'} h-14 m-1 rounded font-bold ${getKeyColor(key)}`,\n          onClick: () => handleKeyPress(key),\n          disabled: gameState.isLoading,\n          children: key === 'Backspace' ? '←' : key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mt-6 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n      onClick: startNewGame,\n      disabled: gameState.isLoading,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n_s(WordleGame, \"3yBdqKxR0VpVUNIlH44K9Mm6vAk=\");\n_c = WordleGame;\nexport default WordleGame;\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordleGame","_s","sessionId","setSessionId","gameState","setGameState","guesses","Array","fill","currentGuess","gameOver","won","message","isLoading","error","letterStates","allFeedback","currentInput","setCurrentInput","API_URL","keyboardRows","startNewGame","prev","response","fetch","method","headers","ok","Error","data","json","session_id","current_guess","game_over","letter_states","refreshGameState","all_feedback","console","handleKeyPress","key","handleRemoveLetter","length","submitGuess","setTimeout","test","handleAddLetter","letter","body","JSON","stringify","current_input","errorData","guess","updatedFeedback","feedback","getTileColor","colIndex","rowIndex","rowFeedback","status","getKeyColor","renderBoard","map","_","className","children","fileName","_jsxFileName","lineNumber","columnNumber","row","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/workshit/InterviewExperience/Issa/my-react-app/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\n\nconst WordleGame = () => {\n  // Game states\n  const [sessionId, setSessionId] = useState(null);\n  const [gameState, setGameState] = useState({\n    guesses: Array(6).fill(\"\"),\n    currentGuess: 0,\n    gameOver: false,\n    won: false,\n    message: \"\",\n    isLoading: false,\n    error: null,\n    letterStates: {},\n    allFeedback: []\n  });\n\n  // Current input for the active row\n  const [currentInput, setCurrentInput] = useState(\"\");\n  \n  // API URL - change this to your Flask server URL\n  const API_URL = \"http://localhost:5000/api\";\n\n  // Keyboard layout\n  const keyboardRows = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['Enter', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Backspace']\n  ];\n\n  // Initialize game\n  useEffect(() => {\n    startNewGame();\n  }, []);\n\n  const startNewGame = async () => {\n    try {\n      setGameState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      const response = await fetch(`${API_URL}/new-game`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) throw new Error('Failed to start new game');\n      \n      const data = await response.json();\n      setSessionId(data.session_id);\n      setCurrentInput(\"\");\n      \n      setGameState({\n        guesses: data.guesses,\n        currentGuess: data.current_guess,\n        gameOver: data.game_over,\n        won: data.won,\n        message: data.message,\n        isLoading: false,\n        error: null,\n        letterStates: data.letter_states || {},\n        allFeedback: []\n      });\n    } catch (error) {\n      setGameState(prev => ({ \n        ...prev, \n        isLoading: false, \n        error: error.message,\n        message: \"Failed to connect to server\"\n      }));\n    }\n  };\n\n  // Update game state from server\n  const refreshGameState = async () => {\n    if (!sessionId) return;\n    \n    try {\n      const response = await fetch(`${API_URL}/get-game-state?session_id=${sessionId}`);\n      \n      if (!response.ok) throw new Error('Failed to get game state');\n      \n      const data = await response.json();\n      \n      setGameState(prev => ({\n        ...prev,\n        guesses: data.guesses,\n        currentGuess: data.current_guess,\n        gameOver: data.game_over,\n        won: data.won,\n        message: data.message,\n        letterStates: data.letter_states,\n        allFeedback: data.all_feedback\n      }));\n    } catch (error) {\n      console.error(\"Error refreshing game state:\", error);\n    }\n  };\n\n  // Handle keyboard input via API\n  const handleKeyPress = async (key) => {\n    if (gameState.gameOver || gameState.isLoading) return;\n\n    if (key === 'Backspace') {\n      await handleRemoveLetter();\n    } else if (key === 'Enter') {\n      if (currentInput.length === 5) {\n        await submitGuess(currentInput);\n      } else {\n        setGameState(prev => ({ ...prev, message: \"Word must be 5 letters\" }));\n        setTimeout(() => setGameState(prev => ({ ...prev, message: \"\" })), 1500);\n      }\n    } else if (/^[A-Z]$/.test(key)) {\n      await handleAddLetter(key);\n    }\n  };\n\n  // Add letter via API\n  const handleAddLetter = async (letter) => {\n    if (currentInput.length >= 5) return;\n    \n    try {\n      setGameState(prev => ({ ...prev, isLoading: true }));\n      \n      const response = await fetch(`${API_URL}/add-letter`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          session_id: sessionId, \n          letter: letter,\n          current_input: currentInput\n        })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to add letter');\n      }\n      \n      const data = await response.json();\n      setCurrentInput(data.current_input);\n      \n      setGameState(prev => ({ ...prev, isLoading: false }));\n    } catch (error) {\n      console.error(\"Error adding letter:\", error);\n      setGameState(prev => ({ ...prev, isLoading: false }));\n    }\n  };\n\n  // Remove letter via API\n  const handleRemoveLetter = async () => {\n    if (currentInput.length === 0) return;\n    \n    try {\n      setGameState(prev => ({ ...prev, isLoading: true }));\n      \n      const response = await fetch(`${API_URL}/remove-letter`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          session_id: sessionId, \n          current_input: currentInput\n        })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to remove letter');\n      }\n      \n      const data = await response.json();\n      setCurrentInput(data.current_input);\n      \n      setGameState(prev => ({ ...prev, isLoading: false }));\n    } catch (error) {\n      console.error(\"Error removing letter:\", error);\n      setGameState(prev => ({ ...prev, isLoading: false }));\n    }\n  };\n\n  // Submit guess to server\n  const submitGuess = async (guess) => {\n    try {\n      setGameState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      const response = await fetch(`${API_URL}/submit-guess`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ session_id: sessionId, guess })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to submit guess');\n      }\n      \n      const data = await response.json();\n      setCurrentInput(\"\");\n      \n      // Update local feedback array with the new feedback\n      const updatedFeedback = [...gameState.allFeedback];\n      updatedFeedback[data.current_guess] = data.feedback;\n      \n      setGameState({\n        guesses: data.guesses,\n        currentGuess: data.current_guess,\n        gameOver: data.game_over,\n        won: data.won,\n        message: data.message,\n        isLoading: false,\n        error: null,\n        letterStates: data.letter_states,\n        allFeedback: updatedFeedback\n      });\n    } catch (error) {\n      setGameState(prev => ({ \n        ...prev, \n        isLoading: false, \n        error: error.message,\n        message: error.message\n      }));\n      setTimeout(() => setGameState(prev => ({ ...prev, message: \"\" })), 1500);\n    }\n  };\n\n  // Get tile color based on feedback from server\n  const getTileColor = (letter, colIndex, rowIndex) => {\n    if (!letter) return \"bg-gray-200\";\n\n    // For submitted rows, use feedback from server\n    if (rowIndex < gameState.currentGuess) {\n      const rowFeedback = gameState.allFeedback[rowIndex];\n      if (rowFeedback && rowFeedback[colIndex]) {\n        const status = rowFeedback[colIndex].status;\n        if (status === \"correct\") return \"bg-green-500 text-white\";\n        if (status === \"present\") return \"bg-yellow-500 text-white\";\n        return \"bg-gray-500 text-white\";\n      }\n      return \"bg-gray-500 text-white\";\n    }\n    \n    // For current row (active input)\n    if (rowIndex === gameState.currentGuess) {\n      return \"bg-white border-2 border-gray-300\";\n    }\n    \n    // For future rows\n    return \"bg-gray-200\";\n  };\n\n  // Get keyboard key color based on letter state from server\n  const getKeyColor = (key) => {\n    if (key === 'Enter' || key === 'Backspace') {\n      return \"bg-gray-300\";\n    }\n    \n    const status = gameState.letterStates[key];\n    if (status === \"correct\") return \"bg-green-500 text-white\";\n    if (status === \"present\") return \"bg-yellow-500 text-white\";\n    if (status === \"absent\") return \"bg-gray-500 text-white\";\n    return \"bg-gray-200\"; // Default/unused\n  };\n\n  // Render the game board\n  const renderBoard = () => {\n    return Array(6).fill().map((_, rowIndex) => (\n      <div key={rowIndex} className=\"flex mb-2\">\n        {Array(5).fill().map((_, colIndex) => {\n          // For the current active row, use the live input\n          let letter = \"\";\n          if (rowIndex === gameState.currentGuess) {\n            letter = currentInput[colIndex] || \"\";\n          } else {\n            // For submitted rows, use the stored guesses\n            letter = (gameState.guesses[rowIndex] && gameState.guesses[rowIndex][colIndex]) ? gameState.guesses[rowIndex][colIndex] : \"\";\n          }\n          \n          return (\n            <div\n              key={colIndex}\n              className={`flex items-center justify-center w-12 h-12 m-1 text-2xl font-bold rounded ${getTileColor(letter, colIndex, rowIndex)}`}\n            >\n              {letter}\n            </div>\n          );\n        })}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n      <h1 className=\"text-4xl font-bold mb-8 text-gray-800\">Wordle Clone</h1>\n      \n      {/* Game message */}\n      {gameState.message && (\n        <div className=\"mb-4 px-4 py-2 rounded bg-blue-100 text-blue-800\">{gameState.message}</div>\n      )}\n      \n      {/* Loading indicator */}\n      {gameState.isLoading && (\n        <div className=\"mb-4 px-4 py-2 rounded bg-yellow-100 text-yellow-800\">Loading...</div>\n      )}\n      \n      {/* Error message */}\n      {gameState.error && (\n        <div className=\"mb-4 px-4 py-2 rounded bg-red-100 text-red-800\">Error: {gameState.error}</div>\n      )}\n      \n      {/* Game board */}\n      <div className=\"mb-8\">\n        {renderBoard()}\n      </div>\n      \n      {/* Virtual keyboard */}\n      <div className=\"w-full max-w-md\">\n        {keyboardRows.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"flex justify-center mb-2\">\n            {row.map(key => (\n              <button\n                key={key}\n                className={`${\n                  key === 'Enter' || key === 'Backspace' ? 'w-16' : 'w-10'\n                } h-14 m-1 rounded font-bold ${getKeyColor(key)}`}\n                onClick={() => handleKeyPress(key)}\n                disabled={gameState.isLoading}\n              >\n                {key === 'Backspace' ? '←' : key}\n              </button>\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      {/* Restart button */}\n      {gameState.gameOver && (\n        <button\n          className=\"mt-6 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n          onClick={startNewGame}\n          disabled={gameState.isLoading}\n        >\n          Play Again\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default WordleGame;\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzCU,OAAO,EAAEC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC1BC,YAAY,EAAE,CAAC;IACfC,QAAQ,EAAE,KAAK;IACfC,GAAG,EAAE,KAAK;IACVC,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE,IAAI;IACXC,YAAY,EAAE,CAAC,CAAC;IAChBC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMuB,OAAO,GAAG,2BAA2B;;EAE3C;EACA,MAAMC,YAAY,GAAG,CACnB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAClD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAC7C,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,CAC1D;;EAED;EACAvB,SAAS,CAAC,MAAM;IACdwB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFhB,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;MAEjE,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,WAAW,EAAE;QAClDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAE7D,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC3B,YAAY,CAAC0B,IAAI,CAACE,UAAU,CAAC;MAC7Bb,eAAe,CAAC,EAAE,CAAC;MAEnBb,YAAY,CAAC;QACXC,OAAO,EAAEuB,IAAI,CAACvB,OAAO;QACrBG,YAAY,EAAEoB,IAAI,CAACG,aAAa;QAChCtB,QAAQ,EAAEmB,IAAI,CAACI,SAAS;QACxBtB,GAAG,EAAEkB,IAAI,CAAClB,GAAG;QACbC,OAAO,EAAEiB,IAAI,CAACjB,OAAO;QACrBC,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE,IAAI;QACXC,YAAY,EAAEc,IAAI,CAACK,aAAa,IAAI,CAAC,CAAC;QACtClB,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdT,YAAY,CAACiB,IAAI,KAAK;QACpB,GAAGA,IAAI;QACPT,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEA,KAAK,CAACF,OAAO;QACpBA,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAMuB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACjC,SAAS,EAAE;IAEhB,IAAI;MACF,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,8BAA8BjB,SAAS,EAAE,CAAC;MAEjF,IAAI,CAACqB,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAE7D,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElCzB,YAAY,CAACiB,IAAI,KAAK;QACpB,GAAGA,IAAI;QACPhB,OAAO,EAAEuB,IAAI,CAACvB,OAAO;QACrBG,YAAY,EAAEoB,IAAI,CAACG,aAAa;QAChCtB,QAAQ,EAAEmB,IAAI,CAACI,SAAS;QACxBtB,GAAG,EAAEkB,IAAI,CAAClB,GAAG;QACbC,OAAO,EAAEiB,IAAI,CAACjB,OAAO;QACrBG,YAAY,EAAEc,IAAI,CAACK,aAAa;QAChClB,WAAW,EAAEa,IAAI,CAACO;MACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACduB,OAAO,CAACvB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAMwB,cAAc,GAAG,MAAOC,GAAG,IAAK;IACpC,IAAInC,SAAS,CAACM,QAAQ,IAAIN,SAAS,CAACS,SAAS,EAAE;IAE/C,IAAI0B,GAAG,KAAK,WAAW,EAAE;MACvB,MAAMC,kBAAkB,CAAC,CAAC;IAC5B,CAAC,MAAM,IAAID,GAAG,KAAK,OAAO,EAAE;MAC1B,IAAItB,YAAY,CAACwB,MAAM,KAAK,CAAC,EAAE;QAC7B,MAAMC,WAAW,CAACzB,YAAY,CAAC;MACjC,CAAC,MAAM;QACLZ,YAAY,CAACiB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEV,OAAO,EAAE;QAAyB,CAAC,CAAC,CAAC;QACtE+B,UAAU,CAAC,MAAMtC,YAAY,CAACiB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEV,OAAO,EAAE;QAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MAC1E;IACF,CAAC,MAAM,IAAI,SAAS,CAACgC,IAAI,CAACL,GAAG,CAAC,EAAE;MAC9B,MAAMM,eAAe,CAACN,GAAG,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMM,eAAe,GAAG,MAAOC,MAAM,IAAK;IACxC,IAAI7B,YAAY,CAACwB,MAAM,IAAI,CAAC,EAAE;IAE9B,IAAI;MACFpC,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE;MAAK,CAAC,CAAC,CAAC;MAEpD,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,aAAa,EAAE;QACpDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBlB,UAAU,EAAE7B,SAAS;UACrB4C,MAAM,EAAEA,MAAM;UACdI,aAAa,EAAEjC;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMwB,SAAS,GAAG,MAAM5B,QAAQ,CAACO,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIF,KAAK,CAACuB,SAAS,CAACrC,KAAK,IAAI,sBAAsB,CAAC;MAC5D;MAEA,MAAMe,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCZ,eAAe,CAACW,IAAI,CAACqB,aAAa,CAAC;MAEnC7C,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACduB,OAAO,CAACvB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CT,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAM2B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIvB,YAAY,CAACwB,MAAM,KAAK,CAAC,EAAE;IAE/B,IAAI;MACFpC,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE;MAAK,CAAC,CAAC,CAAC;MAEpD,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,gBAAgB,EAAE;QACvDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBlB,UAAU,EAAE7B,SAAS;UACrBgD,aAAa,EAAEjC;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMwB,SAAS,GAAG,MAAM5B,QAAQ,CAACO,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIF,KAAK,CAACuB,SAAS,CAACrC,KAAK,IAAI,yBAAyB,CAAC;MAC/D;MAEA,MAAMe,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCZ,eAAe,CAACW,IAAI,CAACqB,aAAa,CAAC;MAEnC7C,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACduB,OAAO,CAACvB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CT,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE;MAAM,CAAC,CAAC,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAM6B,WAAW,GAAG,MAAOU,KAAK,IAAK;IACnC,IAAI;MACF/C,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAET,SAAS,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;MAEjE,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,eAAe,EAAE;QACtDM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAElB,UAAU,EAAE7B,SAAS;UAAEkD;QAAM,CAAC;MACvD,CAAC,CAAC;MAEF,IAAI,CAAC7B,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMwB,SAAS,GAAG,MAAM5B,QAAQ,CAACO,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIF,KAAK,CAACuB,SAAS,CAACrC,KAAK,IAAI,wBAAwB,CAAC;MAC9D;MAEA,MAAMe,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCZ,eAAe,CAAC,EAAE,CAAC;;MAEnB;MACA,MAAMmC,eAAe,GAAG,CAAC,GAAGjD,SAAS,CAACY,WAAW,CAAC;MAClDqC,eAAe,CAACxB,IAAI,CAACG,aAAa,CAAC,GAAGH,IAAI,CAACyB,QAAQ;MAEnDjD,YAAY,CAAC;QACXC,OAAO,EAAEuB,IAAI,CAACvB,OAAO;QACrBG,YAAY,EAAEoB,IAAI,CAACG,aAAa;QAChCtB,QAAQ,EAAEmB,IAAI,CAACI,SAAS;QACxBtB,GAAG,EAAEkB,IAAI,CAAClB,GAAG;QACbC,OAAO,EAAEiB,IAAI,CAACjB,OAAO;QACrBC,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE,IAAI;QACXC,YAAY,EAAEc,IAAI,CAACK,aAAa;QAChClB,WAAW,EAAEqC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOvC,KAAK,EAAE;MACdT,YAAY,CAACiB,IAAI,KAAK;QACpB,GAAGA,IAAI;QACPT,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEA,KAAK,CAACF,OAAO;QACpBA,OAAO,EAAEE,KAAK,CAACF;MACjB,CAAC,CAAC,CAAC;MACH+B,UAAU,CAAC,MAAMtC,YAAY,CAACiB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEV,OAAO,EAAE;MAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;IAC1E;EACF,CAAC;;EAED;EACA,MAAM2C,YAAY,GAAGA,CAACT,MAAM,EAAEU,QAAQ,EAAEC,QAAQ,KAAK;IACnD,IAAI,CAACX,MAAM,EAAE,OAAO,aAAa;;IAEjC;IACA,IAAIW,QAAQ,GAAGrD,SAAS,CAACK,YAAY,EAAE;MACrC,MAAMiD,WAAW,GAAGtD,SAAS,CAACY,WAAW,CAACyC,QAAQ,CAAC;MACnD,IAAIC,WAAW,IAAIA,WAAW,CAACF,QAAQ,CAAC,EAAE;QACxC,MAAMG,MAAM,GAAGD,WAAW,CAACF,QAAQ,CAAC,CAACG,MAAM;QAC3C,IAAIA,MAAM,KAAK,SAAS,EAAE,OAAO,yBAAyB;QAC1D,IAAIA,MAAM,KAAK,SAAS,EAAE,OAAO,0BAA0B;QAC3D,OAAO,wBAAwB;MACjC;MACA,OAAO,wBAAwB;IACjC;;IAEA;IACA,IAAIF,QAAQ,KAAKrD,SAAS,CAACK,YAAY,EAAE;MACvC,OAAO,mCAAmC;IAC5C;;IAEA;IACA,OAAO,aAAa;EACtB,CAAC;;EAED;EACA,MAAMmD,WAAW,GAAIrB,GAAG,IAAK;IAC3B,IAAIA,GAAG,KAAK,OAAO,IAAIA,GAAG,KAAK,WAAW,EAAE;MAC1C,OAAO,aAAa;IACtB;IAEA,MAAMoB,MAAM,GAAGvD,SAAS,CAACW,YAAY,CAACwB,GAAG,CAAC;IAC1C,IAAIoB,MAAM,KAAK,SAAS,EAAE,OAAO,yBAAyB;IAC1D,IAAIA,MAAM,KAAK,SAAS,EAAE,OAAO,0BAA0B;IAC3D,IAAIA,MAAM,KAAK,QAAQ,EAAE,OAAO,wBAAwB;IACxD,OAAO,aAAa,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,OAAOtD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACsD,GAAG,CAAC,CAACC,CAAC,EAAEN,QAAQ,kBACrC1D,OAAA;MAAoBiE,SAAS,EAAC,WAAW;MAAAC,QAAA,EACtC1D,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACsD,GAAG,CAAC,CAACC,CAAC,EAAEP,QAAQ,KAAK;QACpC;QACA,IAAIV,MAAM,GAAG,EAAE;QACf,IAAIW,QAAQ,KAAKrD,SAAS,CAACK,YAAY,EAAE;UACvCqC,MAAM,GAAG7B,YAAY,CAACuC,QAAQ,CAAC,IAAI,EAAE;QACvC,CAAC,MAAM;UACL;UACAV,MAAM,GAAI1C,SAAS,CAACE,OAAO,CAACmD,QAAQ,CAAC,IAAIrD,SAAS,CAACE,OAAO,CAACmD,QAAQ,CAAC,CAACD,QAAQ,CAAC,GAAIpD,SAAS,CAACE,OAAO,CAACmD,QAAQ,CAAC,CAACD,QAAQ,CAAC,GAAG,EAAE;QAC9H;QAEA,oBACEzD,OAAA;UAEEiE,SAAS,EAAE,6EAA6ET,YAAY,CAACT,MAAM,EAAEU,QAAQ,EAAEC,QAAQ,CAAC,EAAG;UAAAQ,QAAA,EAElInB;QAAM,GAHFU,QAAQ;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CAAC;MAEV,CAAC;IAAC,GAnBMZ,QAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAoBb,CACN,CAAC;EACJ,CAAC;EAED,oBACEtE,OAAA;IAAKiE,SAAS,EAAC,wEAAwE;IAAAC,QAAA,gBACrFlE,OAAA;MAAIiE,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGtEjE,SAAS,CAACQ,OAAO,iBAChBb,OAAA;MAAKiE,SAAS,EAAC,kDAAkD;MAAAC,QAAA,EAAE7D,SAAS,CAACQ;IAAO;MAAAsD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAC3F,EAGAjE,SAAS,CAACS,SAAS,iBAClBd,OAAA;MAAKiE,SAAS,EAAC,sDAAsD;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACtF,EAGAjE,SAAS,CAACU,KAAK,iBACdf,OAAA;MAAKiE,SAAS,EAAC,gDAAgD;MAAAC,QAAA,GAAC,SAAO,EAAC7D,SAAS,CAACU,KAAK;IAAA;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAC9F,eAGDtE,OAAA;MAAKiE,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClBJ,WAAW,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eAGNtE,OAAA;MAAKiE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7B7C,YAAY,CAAC0C,GAAG,CAAC,CAACQ,GAAG,EAAEb,QAAQ,kBAC9B1D,OAAA;QAAoBiE,SAAS,EAAC,0BAA0B;QAAAC,QAAA,EACrDK,GAAG,CAACR,GAAG,CAACvB,GAAG,iBACVxC,OAAA;UAEEiE,SAAS,EAAE,GACTzB,GAAG,KAAK,OAAO,IAAIA,GAAG,KAAK,WAAW,GAAG,MAAM,GAAG,MAAM,+BAC3BqB,WAAW,CAACrB,GAAG,CAAC,EAAG;UAClDgC,OAAO,EAAEA,CAAA,KAAMjC,cAAc,CAACC,GAAG,CAAE;UACnCiC,QAAQ,EAAEpE,SAAS,CAACS,SAAU;UAAAoD,QAAA,EAE7B1B,GAAG,KAAK,WAAW,GAAG,GAAG,GAAGA;QAAG,GAP3BA,GAAG;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQF,CACT;MAAC,GAZMZ,QAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAab,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGLjE,SAAS,CAACM,QAAQ,iBACjBX,OAAA;MACEiE,SAAS,EAAC,iEAAiE;MAC3EO,OAAO,EAAElD,YAAa;MACtBmD,QAAQ,EAAEpE,SAAS,CAACS,SAAU;MAAAoD,QAAA,EAC/B;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpE,EAAA,CAtVID,UAAU;AAAAyE,EAAA,GAAVzE,UAAU;AAwVhB,eAAeA,UAAU;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}